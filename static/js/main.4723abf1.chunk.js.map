{"version":3,"sources":["components/Message.component.jsx","firebase/firebase.js","pages/Messenger.jsx","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","username","message","isUser","className","Card","CardContent","Typography","variant","component","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Messenger","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","name","prompt","src","alt","FormControl","Input","placeholder","value","onChange","e","target","IconButton","disabled","color","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sUAuBeA,EAnBCC,sBAAW,WAAqBC,GAAS,IAA5BC,EAA2B,EAA3BA,SAASC,EAAkB,EAAlBA,QAE5BC,EAASF,IAAaC,EAAQD,SAEpC,OACI,qBAAKD,IAAKA,EAAKI,UAAS,kBAAaD,GAAU,gBAA/C,SAEI,cAACE,EAAA,EAAD,CAAMD,UAAWD,EAAS,oBAAsB,qBAAhD,SACG,cAACG,EAAA,EAAD,UACK,eAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAnC,WACMN,GAAD,UAAcD,EAAQD,UAAY,eAAlC,KADL,IAC2DC,EAAQA,oB,QCExEQ,EAbKC,IAASC,cAAc,CACrCC,OAAQ,0CACRC,WAAY,iDACZC,UAAW,iCACXC,cAAe,6CACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIEC,Y,iCCyDRC,EA1DG,WAEd,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOrB,EAAP,KAAiB0B,EAAjB,KAGAC,qBAAU,WAENlB,EAAGmB,WAAW,YAAYC,QAAQ,YAAa,QAAQC,YAAW,SAAAC,GAC/DN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAAEC,GAAID,EAAIC,GAAIlC,QAASiC,EAAIE,iBAErE,IAEHT,qBAAU,WACN,IAAMU,EAAOC,OAAO,uBACpBZ,EAAYW,KACb,IAcH,OACI,sBAAKlC,UAAU,iBAAf,UACI,qBAAKoC,IAAI,6FAA6FC,IAAI,iBAAiBrC,UAAU,mBACrI,4DACA,2CAAcH,EAAd,OAEA,sBAAMG,UAAU,YAAhB,SACI,eAACsC,EAAA,EAAD,CAAatC,UAAU,mBAAvB,UACI,cAACuC,EAAA,EAAD,CAAOvC,UAAU,aAAawC,YAAY,qBAAqBC,MAAOtB,EAAOuB,SAAU,SAAAC,GAAC,OAAIvB,EAASuB,EAAEC,OAAOH,UAE9G,cAACI,EAAA,EAAD,CAAY7C,UAAU,kBAAkB8C,UAAW3B,EAAOf,QAAQ,YAAY2C,MAAM,UAAUC,KAAK,SAASC,QAtBxG,SAAAN,GAChBA,EAAEO,iBAEF5C,EAAGmB,WAAW,YAAY0B,IAAI,CAC1BrD,QAASqB,EACTtB,SAAUA,EACVuD,UAAW7C,IAASS,UAAUqC,WAAWC,oBAG7ClC,EAAS,KAaG,SACI,cAAC,IAAD,WAKZ,cAAC,IAAD,UAEQC,EAASS,KAAI,gBAAEE,EAAF,EAAEA,GAAIlC,EAAN,EAAMA,QAAN,OACT,cAAC,EAAD,CAAkBD,SAAUA,EAAUC,QAASA,GAAjCkC,YCnDvBuB,MARf,WACE,OACE,qBAAKvD,UAAU,MAAf,SACG,cAAC,EAAD,OCKawD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.4723abf1.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core';\r\nimport React, { forwardRef } from 'react';\r\nimport \"./Message.style.css\";\r\n\r\nconst Message = forwardRef(({username,message}, ref) => {\r\n\r\n    const isUser = username === message.username;\r\n\r\n    return (\r\n        <div ref={ref} className={`message ${isUser && \"message_user\"}`} >\r\n\r\n            <Card className={isUser ? \"message__userCard\" : \"message__guestCard\"} >\r\n               <CardContent>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        {!isUser && `${message.username || \"Unknown User\"}:`} {message.message}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Message","import firebase from 'firebase';\r\n\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n      apiKey: \"AIzaSyCw3uDX-k-nQefdkkUAAdxU26rZl7xdKho\",\r\n      authDomain: \"facebook-messenger-clone-80b12.firebaseapp.com\",\r\n      projectId: \"facebook-messenger-clone-80b12\",\r\n      storageBucket: \"facebook-messenger-clone-80b12.appspot.com\",\r\n      messagingSenderId: \"446844885822\",\r\n      appId: \"1:446844885822:web:bd8e5859a0e6bb81c4ea6f\",\r\n      measurementId: \"G-D3WLLL16D5\"\r\n    });\r\n\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;","import { Button, FormControl, Input, InputLabel } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport \"./Messenger.css\";\r\nimport Message from '../components/Message.component';\r\nimport db from '../firebase/firebase';\r\nimport firebase from 'firebase';\r\nimport FlipMove from 'react-flip-move'\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { IconButton } from '@material-ui/core';\r\n\r\n\r\n\r\n\r\nconst Messenger = () => {\r\n\r\n    const [input, setInput] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n    const [username, setUsername] = useState('');\r\n\r\n\r\n    useEffect(() => {\r\n        // run when the component load \r\n        db.collection('messages').orderBy(\"timestamp\", \"desc\").onSnapshot(snapshot => {\r\n           setMessages(snapshot.docs.map(doc => ({ id: doc.id, message: doc.data()}) ))\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const name = prompt(\"Pls enter your name\"); // when this component loads this prompt fired \r\n        setUsername(name); // and set the name what user type in (prompt) box\r\n    }, [])\r\n\r\n    const sendMessage = e => {\r\n        e.preventDefault(); // it kill the default behaviour of the form submit like (Refresh)\r\n\r\n        db.collection(\"messages\").add({\r\n            message: input,\r\n            username: username,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n        })\r\n\r\n        setInput(''); // when button is clicked the input area is cleared\r\n    };\r\n\r\n    return (\r\n        <div className=\"messenger_page\">\r\n            <img src=\"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100\" alt=\"messenger logo\" className=\"massenger_icon\"/>\r\n            <h1>Lets Enjoy It ðŸš€</h1>\r\n            <h2> Welcome {username} </h2>\r\n\r\n            <form className=\"app__form\">\r\n                <FormControl className=\"app_formControll\">\r\n                    <Input className=\"app__input\" placeholder=\"Enter a message...\" value={input} onChange={e => setInput(e.target.value)} />\r\n\r\n                    <IconButton className=\"app__iconButton\" disabled={!input} variant=\"contained\" color=\"primary\" type=\"submit\" onClick={sendMessage}>\r\n                        <SendIcon />\r\n                    </IconButton>\r\n                </FormControl>\r\n            </form>\r\n            \r\n            <FlipMove>\r\n                {\r\n                    messages.map(({id, message}) => (\r\n                        <Message key={id} username={username} message={message} />\r\n                    ))\r\n                }\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Messenger\r\n","import React from 'react';\nimport './App.css';\nimport Messenger from './pages/Messenger';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Messenger />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}